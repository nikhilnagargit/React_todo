{"version":3,"sources":["Item.js","App.js","serviceWorker.js","index.js"],"names":["Item","divelements","this","props","items","map","item","className","key","value","text","onClick","handleDelete","Component","App","state","currentItem","handleTextChange","bind","handleSubmit","e","setState","target","Date","now","preventDefault","newitem","filter","onSubmit","onChange","type","placeholder","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAEqBA,G,6KACT,IAAD,OAEDC,EADWC,KAAKC,MAAMC,MACCC,KAAI,SAACC,GAChC,OACE,yBAAKC,UAAU,WAAWC,IAAKF,EAAKE,KAClC,2BAAOC,MAAOH,EAAKI,KAAMF,IAAKF,EAAKE,MACnC,4BACEG,QAAS,WACP,EAAKR,MAAMS,aAAaN,EAAKE,MAE/BD,UAAU,iBAJZ,cAWN,OAAO,6BAAMN,O,GAlBiBY,cC6DnBC,E,kDA1Db,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXX,MAAO,GACPY,YAAa,CACXN,KAAM,GACNF,IAAK,KAGT,EAAKS,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKN,aAAe,EAAKA,aAAaM,KAAlB,gBAXH,E,6DAaFE,GACflB,KAAKmB,SAAS,CACZL,YAAa,CAAEN,KAAMU,EAAEE,OAAOb,MAAOD,IAAKe,KAAKC,W,mCAItCJ,GAEX,GADAA,EAAEK,iBACkC,KAAhCvB,KAAKa,MAAMC,YAAYN,KAAa,CACtC,IAAMgB,EAAUxB,KAAKa,MAAMC,YAC3Bd,KAAKmB,SAAS,CACZL,YAAa,CAAEN,KAAM,GAAIF,IAAKe,KAAKC,OACnCpB,MAAM,GAAD,mBAAMF,KAAKa,MAAMX,OAAjB,CAAwBsB,S,mCAKtBlB,GACX,IAAMJ,EAAQF,KAAKa,MAAMX,MAAMuB,QAAO,SAACrB,GAAD,OAAUE,IAAQF,EAAKE,OAC7DN,KAAKmB,SAAS,CAAEjB,MAAOA,M,+BAIvB,OACE,yBAAKG,UAAU,WACb,0BAAMqB,SAAU1B,KAAKiB,aAAcZ,UAAU,aAC3C,2BACEsB,SAAU3B,KAAKe,iBACfa,KAAK,OACLC,YAAY,aACZC,GAAG,WACHvB,MAAOP,KAAKa,MAAMC,YAAYN,OAEhC,4BAAQoB,KAAK,SAASE,GAAG,aAAzB,aAIF,yBAAKzB,UAAU,WACb,kBAAC,EAAD,CAAMK,aAAcV,KAAKU,aAAcR,MAAOF,KAAKa,MAAMX,c,GApDjDS,aCQEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8a992f40.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Item extends Component {\r\n  render() {\r\n    const itemlist = this.props.items;\r\n    const divelements = itemlist.map((item) => {\r\n      return (\r\n        <div className=\"listitem\" key={item.key}>\r\n          <input value={item.text} key={item.key}></input>\r\n          <button\r\n            onClick={() => {\r\n              this.props.handleDelete(item.key);\r\n            }}\r\n            className=\"delete-button\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      );\r\n    });\r\n    return <div>{divelements}</div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Item from \"./Item.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: {\n        text: \"\",\n        key: \"\",\n      },\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDelete = this.handleDelete.bind(this);\n  }\n  handleTextChange(e) {\n    this.setState({\n      currentItem: { text: e.target.value, key: Date.now() },\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.currentItem.text !== \"\") {\n      const newitem = this.state.currentItem;\n      this.setState({\n        currentItem: { text: \"\", key: Date.now() },\n        items: [...this.state.items, newitem],\n      });\n    }\n  }\n\n  handleDelete(key) {\n    const items = this.state.items.filter((item) => key !== item.key);\n    this.setState({ items: items });\n  }\n\n  render() {\n    return (\n      <div className=\"todobox\">\n        <form onSubmit={this.handleSubmit} className=\"headerbox\">\n          <input\n            onChange={this.handleTextChange}\n            type=\"text\"\n            placeholder=\"Enter task\"\n            id=\"inputbox\"\n            value={this.state.currentItem.text}\n          />\n          <button type=\"submit\" id=\"addbutton\">\n            Add Task\n          </button>\n        </form>\n        <div className=\"listbox\">\n          <Item handleDelete={this.handleDelete} items={this.state.items} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}